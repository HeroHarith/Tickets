import type { Express, Request, Response, NextFunction } from "express";
import { optimizedStorage as storage } from "./optimized-storage";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";

// Declare global namespace for Express User interface
declare global {
  namespace Express {
    interface User {
      id: number;
      username: string;
      password: string;
      email: string;
      name: string;
      role: string;
      createdAt: Date;
      emailVerified: boolean;
      verificationToken: string | null;
      verificationTokenExpires: Date | null;
      resetToken: string | null;
      resetTokenExpires: Date | null;
    }
  }
}

const scryptAsync = promisify(scrypt);

/**
 * Hash a password for storage
 */
export async function hashPassword(password: string): Promise<string> {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

/**
 * Compare a supplied password with a stored hashed password
 */
async function comparePasswords(supplied: string, stored: string): Promise<boolean> {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

/**
 * Middleware to require certain roles for route access
 */
export function requireRole(roles: string[]): (req: Request, res: Response, next: NextFunction) => void {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({
        code: 401,
        success: false,
        data: null,
        description: 'Authentication required'
      });
    }
    
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        code: 403,
        success: false,
        data: null,
        description: `Access denied. Required role: ${roles.join(' or ')}`
      });
    }
    
    next();
  };
}

/**
 * Setup authentication for the Express app
 */
export function setupAuth(app: Express): void {
  // Session setup
  app.use(session({
    secret: process.env.SESSION_SECRET || 'dev-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === 'production',
      maxAge: 1000 * 60 * 60 * 24 // 1 day
    },
    store: storage.sessionStore
  }));
  
  // Initialize Passport
  app.use(passport.initialize());
  app.use(passport.session());
  
  // Configure Local Strategy
  passport.use(new LocalStrategy(async (username, password, done) => {
    try {
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        return done(null, false);
      }
      
      const isValidPassword = await comparePasswords(password, user.password);
      if (!isValidPassword) {
        return done(null, false);
      }
      
      return done(null, user);
    } catch (error) {
      return done(error);
    }
  }));

  // Serialization for session
  passport.serializeUser((user, done) => {
    done(null, user.id);
  });

  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (err) {
      done(err);
    }
  });

  // Note: Authentication routes are now in separate auth-routes.ts file
}